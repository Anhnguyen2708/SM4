// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/07/2025 06:15:16"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    sm4_top
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module sm4_top_vlg_sample_tst(
	clk,
	data_in,
	enable_key_exp_and_valid_data_in,
	encdec_enable_in,
	encdec_sel_in,
	reset_n,
	user_key_in,
	sampler_tx
);
input  clk;
input [127:0] data_in;
input  enable_key_exp_and_valid_data_in;
input  encdec_enable_in;
input  encdec_sel_in;
input  reset_n;
input [127:0] user_key_in;
output sampler_tx;

reg sample;
time current_time;
always @(clk or data_in or enable_key_exp_and_valid_data_in or encdec_enable_in or encdec_sel_in or reset_n or user_key_in)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module sm4_top_vlg_check_tst (
	key_exp_ready_out,
	key_exp_ready_signal,
	ready_out,
	result_out,
	sampler_rx
);
input  key_exp_ready_out;
input  key_exp_ready_signal;
input  ready_out;
input [127:0] result_out;
input sampler_rx;

reg  key_exp_ready_out_expected;
reg  key_exp_ready_signal_expected;
reg  ready_out_expected;
reg [127:0] result_out_expected;

reg  key_exp_ready_out_prev;
reg  key_exp_ready_signal_prev;
reg  ready_out_prev;
reg [127:0] result_out_prev;

reg  key_exp_ready_out_expected_prev;
reg  ready_out_expected_prev;
reg [127:0] result_out_expected_prev;

reg  last_key_exp_ready_out_exp;
reg  last_ready_out_exp;
reg [127:0] last_result_out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	key_exp_ready_out_prev = key_exp_ready_out;
	key_exp_ready_signal_prev = key_exp_ready_signal;
	ready_out_prev = ready_out;
	result_out_prev = result_out;
end

// update expected /o prevs

always @(trigger)
begin
	key_exp_ready_out_expected_prev = key_exp_ready_out_expected;
	ready_out_expected_prev = ready_out_expected;
	result_out_expected_prev = result_out_expected;
end



// expected key_exp_ready_out
initial
begin
	key_exp_ready_out_expected = 1'bX;
end 

// expected ready_out
initial
begin
	ready_out_expected = 1'bX;
end 
// expected result_out[ 127 ]
initial
begin
	result_out_expected[127] = 1'bX;
end 
// expected result_out[ 126 ]
initial
begin
	result_out_expected[126] = 1'bX;
end 
// expected result_out[ 125 ]
initial
begin
	result_out_expected[125] = 1'bX;
end 
// expected result_out[ 124 ]
initial
begin
	result_out_expected[124] = 1'bX;
end 
// expected result_out[ 123 ]
initial
begin
	result_out_expected[123] = 1'bX;
end 
// expected result_out[ 122 ]
initial
begin
	result_out_expected[122] = 1'bX;
end 
// expected result_out[ 121 ]
initial
begin
	result_out_expected[121] = 1'bX;
end 
// expected result_out[ 120 ]
initial
begin
	result_out_expected[120] = 1'bX;
end 
// expected result_out[ 119 ]
initial
begin
	result_out_expected[119] = 1'bX;
end 
// expected result_out[ 118 ]
initial
begin
	result_out_expected[118] = 1'bX;
end 
// expected result_out[ 117 ]
initial
begin
	result_out_expected[117] = 1'bX;
end 
// expected result_out[ 116 ]
initial
begin
	result_out_expected[116] = 1'bX;
end 
// expected result_out[ 115 ]
initial
begin
	result_out_expected[115] = 1'bX;
end 
// expected result_out[ 114 ]
initial
begin
	result_out_expected[114] = 1'bX;
end 
// expected result_out[ 113 ]
initial
begin
	result_out_expected[113] = 1'bX;
end 
// expected result_out[ 112 ]
initial
begin
	result_out_expected[112] = 1'bX;
end 
// expected result_out[ 111 ]
initial
begin
	result_out_expected[111] = 1'bX;
end 
// expected result_out[ 110 ]
initial
begin
	result_out_expected[110] = 1'bX;
end 
// expected result_out[ 109 ]
initial
begin
	result_out_expected[109] = 1'bX;
end 
// expected result_out[ 108 ]
initial
begin
	result_out_expected[108] = 1'bX;
end 
// expected result_out[ 107 ]
initial
begin
	result_out_expected[107] = 1'bX;
end 
// expected result_out[ 106 ]
initial
begin
	result_out_expected[106] = 1'bX;
end 
// expected result_out[ 105 ]
initial
begin
	result_out_expected[105] = 1'bX;
end 
// expected result_out[ 104 ]
initial
begin
	result_out_expected[104] = 1'bX;
end 
// expected result_out[ 103 ]
initial
begin
	result_out_expected[103] = 1'bX;
end 
// expected result_out[ 102 ]
initial
begin
	result_out_expected[102] = 1'bX;
end 
// expected result_out[ 101 ]
initial
begin
	result_out_expected[101] = 1'bX;
end 
// expected result_out[ 100 ]
initial
begin
	result_out_expected[100] = 1'bX;
end 
// expected result_out[ 99 ]
initial
begin
	result_out_expected[99] = 1'bX;
end 
// expected result_out[ 98 ]
initial
begin
	result_out_expected[98] = 1'bX;
end 
// expected result_out[ 97 ]
initial
begin
	result_out_expected[97] = 1'bX;
end 
// expected result_out[ 96 ]
initial
begin
	result_out_expected[96] = 1'bX;
end 
// expected result_out[ 95 ]
initial
begin
	result_out_expected[95] = 1'bX;
end 
// expected result_out[ 94 ]
initial
begin
	result_out_expected[94] = 1'bX;
end 
// expected result_out[ 93 ]
initial
begin
	result_out_expected[93] = 1'bX;
end 
// expected result_out[ 92 ]
initial
begin
	result_out_expected[92] = 1'bX;
end 
// expected result_out[ 91 ]
initial
begin
	result_out_expected[91] = 1'bX;
end 
// expected result_out[ 90 ]
initial
begin
	result_out_expected[90] = 1'bX;
end 
// expected result_out[ 89 ]
initial
begin
	result_out_expected[89] = 1'bX;
end 
// expected result_out[ 88 ]
initial
begin
	result_out_expected[88] = 1'bX;
end 
// expected result_out[ 87 ]
initial
begin
	result_out_expected[87] = 1'bX;
end 
// expected result_out[ 86 ]
initial
begin
	result_out_expected[86] = 1'bX;
end 
// expected result_out[ 85 ]
initial
begin
	result_out_expected[85] = 1'bX;
end 
// expected result_out[ 84 ]
initial
begin
	result_out_expected[84] = 1'bX;
end 
// expected result_out[ 83 ]
initial
begin
	result_out_expected[83] = 1'bX;
end 
// expected result_out[ 82 ]
initial
begin
	result_out_expected[82] = 1'bX;
end 
// expected result_out[ 81 ]
initial
begin
	result_out_expected[81] = 1'bX;
end 
// expected result_out[ 80 ]
initial
begin
	result_out_expected[80] = 1'bX;
end 
// expected result_out[ 79 ]
initial
begin
	result_out_expected[79] = 1'bX;
end 
// expected result_out[ 78 ]
initial
begin
	result_out_expected[78] = 1'bX;
end 
// expected result_out[ 77 ]
initial
begin
	result_out_expected[77] = 1'bX;
end 
// expected result_out[ 76 ]
initial
begin
	result_out_expected[76] = 1'bX;
end 
// expected result_out[ 75 ]
initial
begin
	result_out_expected[75] = 1'bX;
end 
// expected result_out[ 74 ]
initial
begin
	result_out_expected[74] = 1'bX;
end 
// expected result_out[ 73 ]
initial
begin
	result_out_expected[73] = 1'bX;
end 
// expected result_out[ 72 ]
initial
begin
	result_out_expected[72] = 1'bX;
end 
// expected result_out[ 71 ]
initial
begin
	result_out_expected[71] = 1'bX;
end 
// expected result_out[ 70 ]
initial
begin
	result_out_expected[70] = 1'bX;
end 
// expected result_out[ 69 ]
initial
begin
	result_out_expected[69] = 1'bX;
end 
// expected result_out[ 68 ]
initial
begin
	result_out_expected[68] = 1'bX;
end 
// expected result_out[ 67 ]
initial
begin
	result_out_expected[67] = 1'bX;
end 
// expected result_out[ 66 ]
initial
begin
	result_out_expected[66] = 1'bX;
end 
// expected result_out[ 65 ]
initial
begin
	result_out_expected[65] = 1'bX;
end 
// expected result_out[ 64 ]
initial
begin
	result_out_expected[64] = 1'bX;
end 
// expected result_out[ 63 ]
initial
begin
	result_out_expected[63] = 1'bX;
end 
// expected result_out[ 62 ]
initial
begin
	result_out_expected[62] = 1'bX;
end 
// expected result_out[ 61 ]
initial
begin
	result_out_expected[61] = 1'bX;
end 
// expected result_out[ 60 ]
initial
begin
	result_out_expected[60] = 1'bX;
end 
// expected result_out[ 59 ]
initial
begin
	result_out_expected[59] = 1'bX;
end 
// expected result_out[ 58 ]
initial
begin
	result_out_expected[58] = 1'bX;
end 
// expected result_out[ 57 ]
initial
begin
	result_out_expected[57] = 1'bX;
end 
// expected result_out[ 56 ]
initial
begin
	result_out_expected[56] = 1'bX;
end 
// expected result_out[ 55 ]
initial
begin
	result_out_expected[55] = 1'bX;
end 
// expected result_out[ 54 ]
initial
begin
	result_out_expected[54] = 1'bX;
end 
// expected result_out[ 53 ]
initial
begin
	result_out_expected[53] = 1'bX;
end 
// expected result_out[ 52 ]
initial
begin
	result_out_expected[52] = 1'bX;
end 
// expected result_out[ 51 ]
initial
begin
	result_out_expected[51] = 1'bX;
end 
// expected result_out[ 50 ]
initial
begin
	result_out_expected[50] = 1'bX;
end 
// expected result_out[ 49 ]
initial
begin
	result_out_expected[49] = 1'bX;
end 
// expected result_out[ 48 ]
initial
begin
	result_out_expected[48] = 1'bX;
end 
// expected result_out[ 47 ]
initial
begin
	result_out_expected[47] = 1'bX;
end 
// expected result_out[ 46 ]
initial
begin
	result_out_expected[46] = 1'bX;
end 
// expected result_out[ 45 ]
initial
begin
	result_out_expected[45] = 1'bX;
end 
// expected result_out[ 44 ]
initial
begin
	result_out_expected[44] = 1'bX;
end 
// expected result_out[ 43 ]
initial
begin
	result_out_expected[43] = 1'bX;
end 
// expected result_out[ 42 ]
initial
begin
	result_out_expected[42] = 1'bX;
end 
// expected result_out[ 41 ]
initial
begin
	result_out_expected[41] = 1'bX;
end 
// expected result_out[ 40 ]
initial
begin
	result_out_expected[40] = 1'bX;
end 
// expected result_out[ 39 ]
initial
begin
	result_out_expected[39] = 1'bX;
end 
// expected result_out[ 38 ]
initial
begin
	result_out_expected[38] = 1'bX;
end 
// expected result_out[ 37 ]
initial
begin
	result_out_expected[37] = 1'bX;
end 
// expected result_out[ 36 ]
initial
begin
	result_out_expected[36] = 1'bX;
end 
// expected result_out[ 35 ]
initial
begin
	result_out_expected[35] = 1'bX;
end 
// expected result_out[ 34 ]
initial
begin
	result_out_expected[34] = 1'bX;
end 
// expected result_out[ 33 ]
initial
begin
	result_out_expected[33] = 1'bX;
end 
// expected result_out[ 32 ]
initial
begin
	result_out_expected[32] = 1'bX;
end 
// expected result_out[ 31 ]
initial
begin
	result_out_expected[31] = 1'bX;
end 
// expected result_out[ 30 ]
initial
begin
	result_out_expected[30] = 1'bX;
end 
// expected result_out[ 29 ]
initial
begin
	result_out_expected[29] = 1'bX;
end 
// expected result_out[ 28 ]
initial
begin
	result_out_expected[28] = 1'bX;
end 
// expected result_out[ 27 ]
initial
begin
	result_out_expected[27] = 1'bX;
end 
// expected result_out[ 26 ]
initial
begin
	result_out_expected[26] = 1'bX;
end 
// expected result_out[ 25 ]
initial
begin
	result_out_expected[25] = 1'bX;
end 
// expected result_out[ 24 ]
initial
begin
	result_out_expected[24] = 1'bX;
end 
// expected result_out[ 23 ]
initial
begin
	result_out_expected[23] = 1'bX;
end 
// expected result_out[ 22 ]
initial
begin
	result_out_expected[22] = 1'bX;
end 
// expected result_out[ 21 ]
initial
begin
	result_out_expected[21] = 1'bX;
end 
// expected result_out[ 20 ]
initial
begin
	result_out_expected[20] = 1'bX;
end 
// expected result_out[ 19 ]
initial
begin
	result_out_expected[19] = 1'bX;
end 
// expected result_out[ 18 ]
initial
begin
	result_out_expected[18] = 1'bX;
end 
// expected result_out[ 17 ]
initial
begin
	result_out_expected[17] = 1'bX;
end 
// expected result_out[ 16 ]
initial
begin
	result_out_expected[16] = 1'bX;
end 
// expected result_out[ 15 ]
initial
begin
	result_out_expected[15] = 1'bX;
end 
// expected result_out[ 14 ]
initial
begin
	result_out_expected[14] = 1'bX;
end 
// expected result_out[ 13 ]
initial
begin
	result_out_expected[13] = 1'bX;
end 
// expected result_out[ 12 ]
initial
begin
	result_out_expected[12] = 1'bX;
end 
// expected result_out[ 11 ]
initial
begin
	result_out_expected[11] = 1'bX;
end 
// expected result_out[ 10 ]
initial
begin
	result_out_expected[10] = 1'bX;
end 
// expected result_out[ 9 ]
initial
begin
	result_out_expected[9] = 1'bX;
end 
// expected result_out[ 8 ]
initial
begin
	result_out_expected[8] = 1'bX;
end 
// expected result_out[ 7 ]
initial
begin
	result_out_expected[7] = 1'bX;
end 
// expected result_out[ 6 ]
initial
begin
	result_out_expected[6] = 1'bX;
end 
// expected result_out[ 5 ]
initial
begin
	result_out_expected[5] = 1'bX;
end 
// expected result_out[ 4 ]
initial
begin
	result_out_expected[4] = 1'bX;
end 
// expected result_out[ 3 ]
initial
begin
	result_out_expected[3] = 1'bX;
end 
// expected result_out[ 2 ]
initial
begin
	result_out_expected[2] = 1'bX;
end 
// expected result_out[ 1 ]
initial
begin
	result_out_expected[1] = 1'bX;
end 
// expected result_out[ 0 ]
initial
begin
	result_out_expected[0] = 1'bX;
end 
// generate trigger
always @(key_exp_ready_out_expected or key_exp_ready_out or key_exp_ready_signal_expected or key_exp_ready_signal or ready_out_expected or ready_out or result_out_expected or result_out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected key_exp_ready_out = %b | expected key_exp_ready_signal = %b | expected ready_out = %b | expected result_out = %b | ",key_exp_ready_out_expected_prev,key_exp_ready_signal_expected_prev,ready_out_expected_prev,result_out_expected_prev);
	$display("| real key_exp_ready_out = %b | real key_exp_ready_signal = %b | real ready_out = %b | real result_out = %b | ",key_exp_ready_out_prev,key_exp_ready_signal_prev,ready_out_prev,result_out_prev);
`endif
	if (
		( key_exp_ready_out_expected_prev !== 1'bx ) && ( key_exp_ready_out_prev !== key_exp_ready_out_expected_prev )
		&& ((key_exp_ready_out_expected_prev !== last_key_exp_ready_out_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port key_exp_ready_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", key_exp_ready_out_expected_prev);
		$display ("     Real value = %b", key_exp_ready_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_key_exp_ready_out_exp = key_exp_ready_out_expected_prev;
	end
	if (
		( ready_out_expected_prev !== 1'bx ) && ( ready_out_prev !== ready_out_expected_prev )
		&& ((ready_out_expected_prev !== last_ready_out_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ready_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ready_out_expected_prev);
		$display ("     Real value = %b", ready_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ready_out_exp = ready_out_expected_prev;
	end
	if (
		( result_out_expected_prev[0] !== 1'bx ) && ( result_out_prev[0] !== result_out_expected_prev[0] )
		&& ((result_out_expected_prev[0] !== last_result_out_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[0] = result_out_expected_prev[0];
	end
	if (
		( result_out_expected_prev[1] !== 1'bx ) && ( result_out_prev[1] !== result_out_expected_prev[1] )
		&& ((result_out_expected_prev[1] !== last_result_out_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[1] = result_out_expected_prev[1];
	end
	if (
		( result_out_expected_prev[2] !== 1'bx ) && ( result_out_prev[2] !== result_out_expected_prev[2] )
		&& ((result_out_expected_prev[2] !== last_result_out_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[2] = result_out_expected_prev[2];
	end
	if (
		( result_out_expected_prev[3] !== 1'bx ) && ( result_out_prev[3] !== result_out_expected_prev[3] )
		&& ((result_out_expected_prev[3] !== last_result_out_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[3] = result_out_expected_prev[3];
	end
	if (
		( result_out_expected_prev[4] !== 1'bx ) && ( result_out_prev[4] !== result_out_expected_prev[4] )
		&& ((result_out_expected_prev[4] !== last_result_out_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[4] = result_out_expected_prev[4];
	end
	if (
		( result_out_expected_prev[5] !== 1'bx ) && ( result_out_prev[5] !== result_out_expected_prev[5] )
		&& ((result_out_expected_prev[5] !== last_result_out_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[5] = result_out_expected_prev[5];
	end
	if (
		( result_out_expected_prev[6] !== 1'bx ) && ( result_out_prev[6] !== result_out_expected_prev[6] )
		&& ((result_out_expected_prev[6] !== last_result_out_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[6] = result_out_expected_prev[6];
	end
	if (
		( result_out_expected_prev[7] !== 1'bx ) && ( result_out_prev[7] !== result_out_expected_prev[7] )
		&& ((result_out_expected_prev[7] !== last_result_out_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[7] = result_out_expected_prev[7];
	end
	if (
		( result_out_expected_prev[8] !== 1'bx ) && ( result_out_prev[8] !== result_out_expected_prev[8] )
		&& ((result_out_expected_prev[8] !== last_result_out_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[8] = result_out_expected_prev[8];
	end
	if (
		( result_out_expected_prev[9] !== 1'bx ) && ( result_out_prev[9] !== result_out_expected_prev[9] )
		&& ((result_out_expected_prev[9] !== last_result_out_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[9] = result_out_expected_prev[9];
	end
	if (
		( result_out_expected_prev[10] !== 1'bx ) && ( result_out_prev[10] !== result_out_expected_prev[10] )
		&& ((result_out_expected_prev[10] !== last_result_out_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[10] = result_out_expected_prev[10];
	end
	if (
		( result_out_expected_prev[11] !== 1'bx ) && ( result_out_prev[11] !== result_out_expected_prev[11] )
		&& ((result_out_expected_prev[11] !== last_result_out_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[11] = result_out_expected_prev[11];
	end
	if (
		( result_out_expected_prev[12] !== 1'bx ) && ( result_out_prev[12] !== result_out_expected_prev[12] )
		&& ((result_out_expected_prev[12] !== last_result_out_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[12] = result_out_expected_prev[12];
	end
	if (
		( result_out_expected_prev[13] !== 1'bx ) && ( result_out_prev[13] !== result_out_expected_prev[13] )
		&& ((result_out_expected_prev[13] !== last_result_out_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[13] = result_out_expected_prev[13];
	end
	if (
		( result_out_expected_prev[14] !== 1'bx ) && ( result_out_prev[14] !== result_out_expected_prev[14] )
		&& ((result_out_expected_prev[14] !== last_result_out_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[14] = result_out_expected_prev[14];
	end
	if (
		( result_out_expected_prev[15] !== 1'bx ) && ( result_out_prev[15] !== result_out_expected_prev[15] )
		&& ((result_out_expected_prev[15] !== last_result_out_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[15] = result_out_expected_prev[15];
	end
	if (
		( result_out_expected_prev[16] !== 1'bx ) && ( result_out_prev[16] !== result_out_expected_prev[16] )
		&& ((result_out_expected_prev[16] !== last_result_out_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[16] = result_out_expected_prev[16];
	end
	if (
		( result_out_expected_prev[17] !== 1'bx ) && ( result_out_prev[17] !== result_out_expected_prev[17] )
		&& ((result_out_expected_prev[17] !== last_result_out_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[17] = result_out_expected_prev[17];
	end
	if (
		( result_out_expected_prev[18] !== 1'bx ) && ( result_out_prev[18] !== result_out_expected_prev[18] )
		&& ((result_out_expected_prev[18] !== last_result_out_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[18] = result_out_expected_prev[18];
	end
	if (
		( result_out_expected_prev[19] !== 1'bx ) && ( result_out_prev[19] !== result_out_expected_prev[19] )
		&& ((result_out_expected_prev[19] !== last_result_out_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[19] = result_out_expected_prev[19];
	end
	if (
		( result_out_expected_prev[20] !== 1'bx ) && ( result_out_prev[20] !== result_out_expected_prev[20] )
		&& ((result_out_expected_prev[20] !== last_result_out_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[20] = result_out_expected_prev[20];
	end
	if (
		( result_out_expected_prev[21] !== 1'bx ) && ( result_out_prev[21] !== result_out_expected_prev[21] )
		&& ((result_out_expected_prev[21] !== last_result_out_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[21] = result_out_expected_prev[21];
	end
	if (
		( result_out_expected_prev[22] !== 1'bx ) && ( result_out_prev[22] !== result_out_expected_prev[22] )
		&& ((result_out_expected_prev[22] !== last_result_out_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[22] = result_out_expected_prev[22];
	end
	if (
		( result_out_expected_prev[23] !== 1'bx ) && ( result_out_prev[23] !== result_out_expected_prev[23] )
		&& ((result_out_expected_prev[23] !== last_result_out_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[23] = result_out_expected_prev[23];
	end
	if (
		( result_out_expected_prev[24] !== 1'bx ) && ( result_out_prev[24] !== result_out_expected_prev[24] )
		&& ((result_out_expected_prev[24] !== last_result_out_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[24] = result_out_expected_prev[24];
	end
	if (
		( result_out_expected_prev[25] !== 1'bx ) && ( result_out_prev[25] !== result_out_expected_prev[25] )
		&& ((result_out_expected_prev[25] !== last_result_out_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[25] = result_out_expected_prev[25];
	end
	if (
		( result_out_expected_prev[26] !== 1'bx ) && ( result_out_prev[26] !== result_out_expected_prev[26] )
		&& ((result_out_expected_prev[26] !== last_result_out_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[26] = result_out_expected_prev[26];
	end
	if (
		( result_out_expected_prev[27] !== 1'bx ) && ( result_out_prev[27] !== result_out_expected_prev[27] )
		&& ((result_out_expected_prev[27] !== last_result_out_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[27] = result_out_expected_prev[27];
	end
	if (
		( result_out_expected_prev[28] !== 1'bx ) && ( result_out_prev[28] !== result_out_expected_prev[28] )
		&& ((result_out_expected_prev[28] !== last_result_out_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[28] = result_out_expected_prev[28];
	end
	if (
		( result_out_expected_prev[29] !== 1'bx ) && ( result_out_prev[29] !== result_out_expected_prev[29] )
		&& ((result_out_expected_prev[29] !== last_result_out_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[29] = result_out_expected_prev[29];
	end
	if (
		( result_out_expected_prev[30] !== 1'bx ) && ( result_out_prev[30] !== result_out_expected_prev[30] )
		&& ((result_out_expected_prev[30] !== last_result_out_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[30] = result_out_expected_prev[30];
	end
	if (
		( result_out_expected_prev[31] !== 1'bx ) && ( result_out_prev[31] !== result_out_expected_prev[31] )
		&& ((result_out_expected_prev[31] !== last_result_out_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[31] = result_out_expected_prev[31];
	end
	if (
		( result_out_expected_prev[32] !== 1'bx ) && ( result_out_prev[32] !== result_out_expected_prev[32] )
		&& ((result_out_expected_prev[32] !== last_result_out_exp[32]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[32] = result_out_expected_prev[32];
	end
	if (
		( result_out_expected_prev[33] !== 1'bx ) && ( result_out_prev[33] !== result_out_expected_prev[33] )
		&& ((result_out_expected_prev[33] !== last_result_out_exp[33]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[33] = result_out_expected_prev[33];
	end
	if (
		( result_out_expected_prev[34] !== 1'bx ) && ( result_out_prev[34] !== result_out_expected_prev[34] )
		&& ((result_out_expected_prev[34] !== last_result_out_exp[34]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[34] = result_out_expected_prev[34];
	end
	if (
		( result_out_expected_prev[35] !== 1'bx ) && ( result_out_prev[35] !== result_out_expected_prev[35] )
		&& ((result_out_expected_prev[35] !== last_result_out_exp[35]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[35] = result_out_expected_prev[35];
	end
	if (
		( result_out_expected_prev[36] !== 1'bx ) && ( result_out_prev[36] !== result_out_expected_prev[36] )
		&& ((result_out_expected_prev[36] !== last_result_out_exp[36]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[36] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[36] = result_out_expected_prev[36];
	end
	if (
		( result_out_expected_prev[37] !== 1'bx ) && ( result_out_prev[37] !== result_out_expected_prev[37] )
		&& ((result_out_expected_prev[37] !== last_result_out_exp[37]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[37] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[37] = result_out_expected_prev[37];
	end
	if (
		( result_out_expected_prev[38] !== 1'bx ) && ( result_out_prev[38] !== result_out_expected_prev[38] )
		&& ((result_out_expected_prev[38] !== last_result_out_exp[38]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[38] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[38] = result_out_expected_prev[38];
	end
	if (
		( result_out_expected_prev[39] !== 1'bx ) && ( result_out_prev[39] !== result_out_expected_prev[39] )
		&& ((result_out_expected_prev[39] !== last_result_out_exp[39]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[39] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[39] = result_out_expected_prev[39];
	end
	if (
		( result_out_expected_prev[40] !== 1'bx ) && ( result_out_prev[40] !== result_out_expected_prev[40] )
		&& ((result_out_expected_prev[40] !== last_result_out_exp[40]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[40] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[40] = result_out_expected_prev[40];
	end
	if (
		( result_out_expected_prev[41] !== 1'bx ) && ( result_out_prev[41] !== result_out_expected_prev[41] )
		&& ((result_out_expected_prev[41] !== last_result_out_exp[41]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[41] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[41] = result_out_expected_prev[41];
	end
	if (
		( result_out_expected_prev[42] !== 1'bx ) && ( result_out_prev[42] !== result_out_expected_prev[42] )
		&& ((result_out_expected_prev[42] !== last_result_out_exp[42]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[42] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[42] = result_out_expected_prev[42];
	end
	if (
		( result_out_expected_prev[43] !== 1'bx ) && ( result_out_prev[43] !== result_out_expected_prev[43] )
		&& ((result_out_expected_prev[43] !== last_result_out_exp[43]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[43] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[43] = result_out_expected_prev[43];
	end
	if (
		( result_out_expected_prev[44] !== 1'bx ) && ( result_out_prev[44] !== result_out_expected_prev[44] )
		&& ((result_out_expected_prev[44] !== last_result_out_exp[44]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[44] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[44] = result_out_expected_prev[44];
	end
	if (
		( result_out_expected_prev[45] !== 1'bx ) && ( result_out_prev[45] !== result_out_expected_prev[45] )
		&& ((result_out_expected_prev[45] !== last_result_out_exp[45]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[45] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[45] = result_out_expected_prev[45];
	end
	if (
		( result_out_expected_prev[46] !== 1'bx ) && ( result_out_prev[46] !== result_out_expected_prev[46] )
		&& ((result_out_expected_prev[46] !== last_result_out_exp[46]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[46] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[46] = result_out_expected_prev[46];
	end
	if (
		( result_out_expected_prev[47] !== 1'bx ) && ( result_out_prev[47] !== result_out_expected_prev[47] )
		&& ((result_out_expected_prev[47] !== last_result_out_exp[47]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[47] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[47] = result_out_expected_prev[47];
	end
	if (
		( result_out_expected_prev[48] !== 1'bx ) && ( result_out_prev[48] !== result_out_expected_prev[48] )
		&& ((result_out_expected_prev[48] !== last_result_out_exp[48]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[48] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[48] = result_out_expected_prev[48];
	end
	if (
		( result_out_expected_prev[49] !== 1'bx ) && ( result_out_prev[49] !== result_out_expected_prev[49] )
		&& ((result_out_expected_prev[49] !== last_result_out_exp[49]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[49] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[49] = result_out_expected_prev[49];
	end
	if (
		( result_out_expected_prev[50] !== 1'bx ) && ( result_out_prev[50] !== result_out_expected_prev[50] )
		&& ((result_out_expected_prev[50] !== last_result_out_exp[50]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[50] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[50] = result_out_expected_prev[50];
	end
	if (
		( result_out_expected_prev[51] !== 1'bx ) && ( result_out_prev[51] !== result_out_expected_prev[51] )
		&& ((result_out_expected_prev[51] !== last_result_out_exp[51]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[51] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[51] = result_out_expected_prev[51];
	end
	if (
		( result_out_expected_prev[52] !== 1'bx ) && ( result_out_prev[52] !== result_out_expected_prev[52] )
		&& ((result_out_expected_prev[52] !== last_result_out_exp[52]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[52] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[52] = result_out_expected_prev[52];
	end
	if (
		( result_out_expected_prev[53] !== 1'bx ) && ( result_out_prev[53] !== result_out_expected_prev[53] )
		&& ((result_out_expected_prev[53] !== last_result_out_exp[53]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[53] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[53] = result_out_expected_prev[53];
	end
	if (
		( result_out_expected_prev[54] !== 1'bx ) && ( result_out_prev[54] !== result_out_expected_prev[54] )
		&& ((result_out_expected_prev[54] !== last_result_out_exp[54]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[54] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[54] = result_out_expected_prev[54];
	end
	if (
		( result_out_expected_prev[55] !== 1'bx ) && ( result_out_prev[55] !== result_out_expected_prev[55] )
		&& ((result_out_expected_prev[55] !== last_result_out_exp[55]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[55] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[55] = result_out_expected_prev[55];
	end
	if (
		( result_out_expected_prev[56] !== 1'bx ) && ( result_out_prev[56] !== result_out_expected_prev[56] )
		&& ((result_out_expected_prev[56] !== last_result_out_exp[56]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[56] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[56] = result_out_expected_prev[56];
	end
	if (
		( result_out_expected_prev[57] !== 1'bx ) && ( result_out_prev[57] !== result_out_expected_prev[57] )
		&& ((result_out_expected_prev[57] !== last_result_out_exp[57]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[57] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[57] = result_out_expected_prev[57];
	end
	if (
		( result_out_expected_prev[58] !== 1'bx ) && ( result_out_prev[58] !== result_out_expected_prev[58] )
		&& ((result_out_expected_prev[58] !== last_result_out_exp[58]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[58] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[58] = result_out_expected_prev[58];
	end
	if (
		( result_out_expected_prev[59] !== 1'bx ) && ( result_out_prev[59] !== result_out_expected_prev[59] )
		&& ((result_out_expected_prev[59] !== last_result_out_exp[59]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[59] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[59] = result_out_expected_prev[59];
	end
	if (
		( result_out_expected_prev[60] !== 1'bx ) && ( result_out_prev[60] !== result_out_expected_prev[60] )
		&& ((result_out_expected_prev[60] !== last_result_out_exp[60]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[60] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[60] = result_out_expected_prev[60];
	end
	if (
		( result_out_expected_prev[61] !== 1'bx ) && ( result_out_prev[61] !== result_out_expected_prev[61] )
		&& ((result_out_expected_prev[61] !== last_result_out_exp[61]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[61] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[61] = result_out_expected_prev[61];
	end
	if (
		( result_out_expected_prev[62] !== 1'bx ) && ( result_out_prev[62] !== result_out_expected_prev[62] )
		&& ((result_out_expected_prev[62] !== last_result_out_exp[62]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[62] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[62] = result_out_expected_prev[62];
	end
	if (
		( result_out_expected_prev[63] !== 1'bx ) && ( result_out_prev[63] !== result_out_expected_prev[63] )
		&& ((result_out_expected_prev[63] !== last_result_out_exp[63]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[63] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[63] = result_out_expected_prev[63];
	end
	if (
		( result_out_expected_prev[64] !== 1'bx ) && ( result_out_prev[64] !== result_out_expected_prev[64] )
		&& ((result_out_expected_prev[64] !== last_result_out_exp[64]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[64] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[64] = result_out_expected_prev[64];
	end
	if (
		( result_out_expected_prev[65] !== 1'bx ) && ( result_out_prev[65] !== result_out_expected_prev[65] )
		&& ((result_out_expected_prev[65] !== last_result_out_exp[65]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[65] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[65] = result_out_expected_prev[65];
	end
	if (
		( result_out_expected_prev[66] !== 1'bx ) && ( result_out_prev[66] !== result_out_expected_prev[66] )
		&& ((result_out_expected_prev[66] !== last_result_out_exp[66]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[66] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[66] = result_out_expected_prev[66];
	end
	if (
		( result_out_expected_prev[67] !== 1'bx ) && ( result_out_prev[67] !== result_out_expected_prev[67] )
		&& ((result_out_expected_prev[67] !== last_result_out_exp[67]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[67] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[67] = result_out_expected_prev[67];
	end
	if (
		( result_out_expected_prev[68] !== 1'bx ) && ( result_out_prev[68] !== result_out_expected_prev[68] )
		&& ((result_out_expected_prev[68] !== last_result_out_exp[68]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[68] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[68] = result_out_expected_prev[68];
	end
	if (
		( result_out_expected_prev[69] !== 1'bx ) && ( result_out_prev[69] !== result_out_expected_prev[69] )
		&& ((result_out_expected_prev[69] !== last_result_out_exp[69]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[69] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[69] = result_out_expected_prev[69];
	end
	if (
		( result_out_expected_prev[70] !== 1'bx ) && ( result_out_prev[70] !== result_out_expected_prev[70] )
		&& ((result_out_expected_prev[70] !== last_result_out_exp[70]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[70] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[70] = result_out_expected_prev[70];
	end
	if (
		( result_out_expected_prev[71] !== 1'bx ) && ( result_out_prev[71] !== result_out_expected_prev[71] )
		&& ((result_out_expected_prev[71] !== last_result_out_exp[71]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[71] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[71] = result_out_expected_prev[71];
	end
	if (
		( result_out_expected_prev[72] !== 1'bx ) && ( result_out_prev[72] !== result_out_expected_prev[72] )
		&& ((result_out_expected_prev[72] !== last_result_out_exp[72]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[72] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[72] = result_out_expected_prev[72];
	end
	if (
		( result_out_expected_prev[73] !== 1'bx ) && ( result_out_prev[73] !== result_out_expected_prev[73] )
		&& ((result_out_expected_prev[73] !== last_result_out_exp[73]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[73] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[73] = result_out_expected_prev[73];
	end
	if (
		( result_out_expected_prev[74] !== 1'bx ) && ( result_out_prev[74] !== result_out_expected_prev[74] )
		&& ((result_out_expected_prev[74] !== last_result_out_exp[74]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[74] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[74] = result_out_expected_prev[74];
	end
	if (
		( result_out_expected_prev[75] !== 1'bx ) && ( result_out_prev[75] !== result_out_expected_prev[75] )
		&& ((result_out_expected_prev[75] !== last_result_out_exp[75]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[75] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[75] = result_out_expected_prev[75];
	end
	if (
		( result_out_expected_prev[76] !== 1'bx ) && ( result_out_prev[76] !== result_out_expected_prev[76] )
		&& ((result_out_expected_prev[76] !== last_result_out_exp[76]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[76] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[76] = result_out_expected_prev[76];
	end
	if (
		( result_out_expected_prev[77] !== 1'bx ) && ( result_out_prev[77] !== result_out_expected_prev[77] )
		&& ((result_out_expected_prev[77] !== last_result_out_exp[77]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[77] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[77] = result_out_expected_prev[77];
	end
	if (
		( result_out_expected_prev[78] !== 1'bx ) && ( result_out_prev[78] !== result_out_expected_prev[78] )
		&& ((result_out_expected_prev[78] !== last_result_out_exp[78]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[78] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[78] = result_out_expected_prev[78];
	end
	if (
		( result_out_expected_prev[79] !== 1'bx ) && ( result_out_prev[79] !== result_out_expected_prev[79] )
		&& ((result_out_expected_prev[79] !== last_result_out_exp[79]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[79] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[79] = result_out_expected_prev[79];
	end
	if (
		( result_out_expected_prev[80] !== 1'bx ) && ( result_out_prev[80] !== result_out_expected_prev[80] )
		&& ((result_out_expected_prev[80] !== last_result_out_exp[80]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[80] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[80] = result_out_expected_prev[80];
	end
	if (
		( result_out_expected_prev[81] !== 1'bx ) && ( result_out_prev[81] !== result_out_expected_prev[81] )
		&& ((result_out_expected_prev[81] !== last_result_out_exp[81]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[81] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[81] = result_out_expected_prev[81];
	end
	if (
		( result_out_expected_prev[82] !== 1'bx ) && ( result_out_prev[82] !== result_out_expected_prev[82] )
		&& ((result_out_expected_prev[82] !== last_result_out_exp[82]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[82] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[82] = result_out_expected_prev[82];
	end
	if (
		( result_out_expected_prev[83] !== 1'bx ) && ( result_out_prev[83] !== result_out_expected_prev[83] )
		&& ((result_out_expected_prev[83] !== last_result_out_exp[83]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[83] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[83] = result_out_expected_prev[83];
	end
	if (
		( result_out_expected_prev[84] !== 1'bx ) && ( result_out_prev[84] !== result_out_expected_prev[84] )
		&& ((result_out_expected_prev[84] !== last_result_out_exp[84]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[84] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[84] = result_out_expected_prev[84];
	end
	if (
		( result_out_expected_prev[85] !== 1'bx ) && ( result_out_prev[85] !== result_out_expected_prev[85] )
		&& ((result_out_expected_prev[85] !== last_result_out_exp[85]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[85] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[85] = result_out_expected_prev[85];
	end
	if (
		( result_out_expected_prev[86] !== 1'bx ) && ( result_out_prev[86] !== result_out_expected_prev[86] )
		&& ((result_out_expected_prev[86] !== last_result_out_exp[86]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[86] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[86] = result_out_expected_prev[86];
	end
	if (
		( result_out_expected_prev[87] !== 1'bx ) && ( result_out_prev[87] !== result_out_expected_prev[87] )
		&& ((result_out_expected_prev[87] !== last_result_out_exp[87]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[87] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[87] = result_out_expected_prev[87];
	end
	if (
		( result_out_expected_prev[88] !== 1'bx ) && ( result_out_prev[88] !== result_out_expected_prev[88] )
		&& ((result_out_expected_prev[88] !== last_result_out_exp[88]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[88] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[88] = result_out_expected_prev[88];
	end
	if (
		( result_out_expected_prev[89] !== 1'bx ) && ( result_out_prev[89] !== result_out_expected_prev[89] )
		&& ((result_out_expected_prev[89] !== last_result_out_exp[89]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[89] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[89] = result_out_expected_prev[89];
	end
	if (
		( result_out_expected_prev[90] !== 1'bx ) && ( result_out_prev[90] !== result_out_expected_prev[90] )
		&& ((result_out_expected_prev[90] !== last_result_out_exp[90]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[90] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[90] = result_out_expected_prev[90];
	end
	if (
		( result_out_expected_prev[91] !== 1'bx ) && ( result_out_prev[91] !== result_out_expected_prev[91] )
		&& ((result_out_expected_prev[91] !== last_result_out_exp[91]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[91] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[91] = result_out_expected_prev[91];
	end
	if (
		( result_out_expected_prev[92] !== 1'bx ) && ( result_out_prev[92] !== result_out_expected_prev[92] )
		&& ((result_out_expected_prev[92] !== last_result_out_exp[92]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[92] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[92] = result_out_expected_prev[92];
	end
	if (
		( result_out_expected_prev[93] !== 1'bx ) && ( result_out_prev[93] !== result_out_expected_prev[93] )
		&& ((result_out_expected_prev[93] !== last_result_out_exp[93]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[93] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[93] = result_out_expected_prev[93];
	end
	if (
		( result_out_expected_prev[94] !== 1'bx ) && ( result_out_prev[94] !== result_out_expected_prev[94] )
		&& ((result_out_expected_prev[94] !== last_result_out_exp[94]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[94] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[94] = result_out_expected_prev[94];
	end
	if (
		( result_out_expected_prev[95] !== 1'bx ) && ( result_out_prev[95] !== result_out_expected_prev[95] )
		&& ((result_out_expected_prev[95] !== last_result_out_exp[95]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[95] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[95] = result_out_expected_prev[95];
	end
	if (
		( result_out_expected_prev[96] !== 1'bx ) && ( result_out_prev[96] !== result_out_expected_prev[96] )
		&& ((result_out_expected_prev[96] !== last_result_out_exp[96]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[96] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[96] = result_out_expected_prev[96];
	end
	if (
		( result_out_expected_prev[97] !== 1'bx ) && ( result_out_prev[97] !== result_out_expected_prev[97] )
		&& ((result_out_expected_prev[97] !== last_result_out_exp[97]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[97] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[97] = result_out_expected_prev[97];
	end
	if (
		( result_out_expected_prev[98] !== 1'bx ) && ( result_out_prev[98] !== result_out_expected_prev[98] )
		&& ((result_out_expected_prev[98] !== last_result_out_exp[98]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[98] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[98] = result_out_expected_prev[98];
	end
	if (
		( result_out_expected_prev[99] !== 1'bx ) && ( result_out_prev[99] !== result_out_expected_prev[99] )
		&& ((result_out_expected_prev[99] !== last_result_out_exp[99]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[99] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[99] = result_out_expected_prev[99];
	end
	if (
		( result_out_expected_prev[100] !== 1'bx ) && ( result_out_prev[100] !== result_out_expected_prev[100] )
		&& ((result_out_expected_prev[100] !== last_result_out_exp[100]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[100] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[100] = result_out_expected_prev[100];
	end
	if (
		( result_out_expected_prev[101] !== 1'bx ) && ( result_out_prev[101] !== result_out_expected_prev[101] )
		&& ((result_out_expected_prev[101] !== last_result_out_exp[101]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[101] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[101] = result_out_expected_prev[101];
	end
	if (
		( result_out_expected_prev[102] !== 1'bx ) && ( result_out_prev[102] !== result_out_expected_prev[102] )
		&& ((result_out_expected_prev[102] !== last_result_out_exp[102]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[102] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[102] = result_out_expected_prev[102];
	end
	if (
		( result_out_expected_prev[103] !== 1'bx ) && ( result_out_prev[103] !== result_out_expected_prev[103] )
		&& ((result_out_expected_prev[103] !== last_result_out_exp[103]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[103] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[103] = result_out_expected_prev[103];
	end
	if (
		( result_out_expected_prev[104] !== 1'bx ) && ( result_out_prev[104] !== result_out_expected_prev[104] )
		&& ((result_out_expected_prev[104] !== last_result_out_exp[104]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[104] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[104] = result_out_expected_prev[104];
	end
	if (
		( result_out_expected_prev[105] !== 1'bx ) && ( result_out_prev[105] !== result_out_expected_prev[105] )
		&& ((result_out_expected_prev[105] !== last_result_out_exp[105]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[105] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[105] = result_out_expected_prev[105];
	end
	if (
		( result_out_expected_prev[106] !== 1'bx ) && ( result_out_prev[106] !== result_out_expected_prev[106] )
		&& ((result_out_expected_prev[106] !== last_result_out_exp[106]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[106] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[106] = result_out_expected_prev[106];
	end
	if (
		( result_out_expected_prev[107] !== 1'bx ) && ( result_out_prev[107] !== result_out_expected_prev[107] )
		&& ((result_out_expected_prev[107] !== last_result_out_exp[107]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[107] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[107] = result_out_expected_prev[107];
	end
	if (
		( result_out_expected_prev[108] !== 1'bx ) && ( result_out_prev[108] !== result_out_expected_prev[108] )
		&& ((result_out_expected_prev[108] !== last_result_out_exp[108]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[108] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[108] = result_out_expected_prev[108];
	end
	if (
		( result_out_expected_prev[109] !== 1'bx ) && ( result_out_prev[109] !== result_out_expected_prev[109] )
		&& ((result_out_expected_prev[109] !== last_result_out_exp[109]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[109] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[109] = result_out_expected_prev[109];
	end
	if (
		( result_out_expected_prev[110] !== 1'bx ) && ( result_out_prev[110] !== result_out_expected_prev[110] )
		&& ((result_out_expected_prev[110] !== last_result_out_exp[110]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[110] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[110] = result_out_expected_prev[110];
	end
	if (
		( result_out_expected_prev[111] !== 1'bx ) && ( result_out_prev[111] !== result_out_expected_prev[111] )
		&& ((result_out_expected_prev[111] !== last_result_out_exp[111]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[111] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[111] = result_out_expected_prev[111];
	end
	if (
		( result_out_expected_prev[112] !== 1'bx ) && ( result_out_prev[112] !== result_out_expected_prev[112] )
		&& ((result_out_expected_prev[112] !== last_result_out_exp[112]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[112] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[112] = result_out_expected_prev[112];
	end
	if (
		( result_out_expected_prev[113] !== 1'bx ) && ( result_out_prev[113] !== result_out_expected_prev[113] )
		&& ((result_out_expected_prev[113] !== last_result_out_exp[113]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[113] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[113] = result_out_expected_prev[113];
	end
	if (
		( result_out_expected_prev[114] !== 1'bx ) && ( result_out_prev[114] !== result_out_expected_prev[114] )
		&& ((result_out_expected_prev[114] !== last_result_out_exp[114]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[114] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[114] = result_out_expected_prev[114];
	end
	if (
		( result_out_expected_prev[115] !== 1'bx ) && ( result_out_prev[115] !== result_out_expected_prev[115] )
		&& ((result_out_expected_prev[115] !== last_result_out_exp[115]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[115] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[115] = result_out_expected_prev[115];
	end
	if (
		( result_out_expected_prev[116] !== 1'bx ) && ( result_out_prev[116] !== result_out_expected_prev[116] )
		&& ((result_out_expected_prev[116] !== last_result_out_exp[116]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[116] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[116] = result_out_expected_prev[116];
	end
	if (
		( result_out_expected_prev[117] !== 1'bx ) && ( result_out_prev[117] !== result_out_expected_prev[117] )
		&& ((result_out_expected_prev[117] !== last_result_out_exp[117]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[117] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[117] = result_out_expected_prev[117];
	end
	if (
		( result_out_expected_prev[118] !== 1'bx ) && ( result_out_prev[118] !== result_out_expected_prev[118] )
		&& ((result_out_expected_prev[118] !== last_result_out_exp[118]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[118] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[118] = result_out_expected_prev[118];
	end
	if (
		( result_out_expected_prev[119] !== 1'bx ) && ( result_out_prev[119] !== result_out_expected_prev[119] )
		&& ((result_out_expected_prev[119] !== last_result_out_exp[119]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[119] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[119] = result_out_expected_prev[119];
	end
	if (
		( result_out_expected_prev[120] !== 1'bx ) && ( result_out_prev[120] !== result_out_expected_prev[120] )
		&& ((result_out_expected_prev[120] !== last_result_out_exp[120]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[120] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[120] = result_out_expected_prev[120];
	end
	if (
		( result_out_expected_prev[121] !== 1'bx ) && ( result_out_prev[121] !== result_out_expected_prev[121] )
		&& ((result_out_expected_prev[121] !== last_result_out_exp[121]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[121] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[121] = result_out_expected_prev[121];
	end
	if (
		( result_out_expected_prev[122] !== 1'bx ) && ( result_out_prev[122] !== result_out_expected_prev[122] )
		&& ((result_out_expected_prev[122] !== last_result_out_exp[122]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[122] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[122] = result_out_expected_prev[122];
	end
	if (
		( result_out_expected_prev[123] !== 1'bx ) && ( result_out_prev[123] !== result_out_expected_prev[123] )
		&& ((result_out_expected_prev[123] !== last_result_out_exp[123]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[123] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[123] = result_out_expected_prev[123];
	end
	if (
		( result_out_expected_prev[124] !== 1'bx ) && ( result_out_prev[124] !== result_out_expected_prev[124] )
		&& ((result_out_expected_prev[124] !== last_result_out_exp[124]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[124] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[124] = result_out_expected_prev[124];
	end
	if (
		( result_out_expected_prev[125] !== 1'bx ) && ( result_out_prev[125] !== result_out_expected_prev[125] )
		&& ((result_out_expected_prev[125] !== last_result_out_exp[125]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[125] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[125] = result_out_expected_prev[125];
	end
	if (
		( result_out_expected_prev[126] !== 1'bx ) && ( result_out_prev[126] !== result_out_expected_prev[126] )
		&& ((result_out_expected_prev[126] !== last_result_out_exp[126]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[126] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[126] = result_out_expected_prev[126];
	end
	if (
		( result_out_expected_prev[127] !== 1'bx ) && ( result_out_prev[127] !== result_out_expected_prev[127] )
		&& ((result_out_expected_prev[127] !== last_result_out_exp[127]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_out[127] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_out_expected_prev);
		$display ("     Real value = %b", result_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_out_exp[127] = result_out_expected_prev[127];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module sm4_top_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [127:0] data_in;
reg enable_key_exp_and_valid_data_in;
reg encdec_enable_in;
reg encdec_sel_in;
reg reset_n;
reg [127:0] user_key_in;
// wires                                               
wire key_exp_ready_out;
wire key_exp_ready_signal;
wire ready_out;
wire [127:0] result_out;

wire sampler;                             

// assign statements (if any)                          
sm4_top i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.data_in(data_in),
	.enable_key_exp_and_valid_data_in(enable_key_exp_and_valid_data_in),
	.encdec_enable_in(encdec_enable_in),
	.encdec_sel_in(encdec_sel_in),
	.key_exp_ready_out(key_exp_ready_out),
	.key_exp_ready_signal(key_exp_ready_signal),
	.ready_out(ready_out),
	.reset_n(reset_n),
	.result_out(result_out),
	.user_key_in(user_key_in)
);

// clk
always
begin
	clk = 1'b0;
	clk = #2500 1'b1;
	#2500;
end 

// reset_n
initial
begin
	reset_n = 1'b1;
end 

// enable_key_exp_and_valid_data_in
initial
begin
	enable_key_exp_and_valid_data_in = 1'b1;
	enable_key_exp_and_valid_data_in = #20000 1'b0;
	enable_key_exp_and_valid_data_in = #180000 1'b1;
	enable_key_exp_and_valid_data_in = #20000 1'b0;
end 

// encdec_enable_in
initial
begin
	encdec_enable_in = 1'b0;
	encdec_enable_in = #30000 1'b1;
	encdec_enable_in = #20000 1'b0;
	encdec_enable_in = #340000 1'b1;
	encdec_enable_in = #30000 1'b0;
end 

// encdec_sel_in
initial
begin
	encdec_sel_in = 1'b0;
	encdec_sel_in = #200000 1'b1;
end 
// data_in[ 127 ]
initial
begin
	data_in[127] = 1'b0;
end 
// data_in[ 126 ]
initial
begin
	data_in[126] = 1'b0;
end 
// data_in[ 125 ]
initial
begin
	data_in[125] = 1'b0;
end 
// data_in[ 124 ]
initial
begin
	data_in[124] = 1'b0;
end 
// data_in[ 123 ]
initial
begin
	data_in[123] = 1'b0;
end 
// data_in[ 122 ]
initial
begin
	data_in[122] = 1'b0;
end 
// data_in[ 121 ]
initial
begin
	data_in[121] = 1'b0;
end 
// data_in[ 120 ]
initial
begin
	data_in[120] = 1'b1;
end 
// data_in[ 119 ]
initial
begin
	data_in[119] = 1'b0;
end 
// data_in[ 118 ]
initial
begin
	data_in[118] = 1'b0;
end 
// data_in[ 117 ]
initial
begin
	data_in[117] = 1'b1;
end 
// data_in[ 116 ]
initial
begin
	data_in[116] = 1'b0;
end 
// data_in[ 115 ]
initial
begin
	data_in[115] = 1'b0;
end 
// data_in[ 114 ]
initial
begin
	data_in[114] = 1'b0;
end 
// data_in[ 113 ]
initial
begin
	data_in[113] = 1'b1;
end 
// data_in[ 112 ]
initial
begin
	data_in[112] = 1'b1;
end 
// data_in[ 111 ]
initial
begin
	data_in[111] = 1'b0;
end 
// data_in[ 110 ]
initial
begin
	data_in[110] = 1'b1;
end 
// data_in[ 109 ]
initial
begin
	data_in[109] = 1'b0;
end 
// data_in[ 108 ]
initial
begin
	data_in[108] = 1'b0;
end 
// data_in[ 107 ]
initial
begin
	data_in[107] = 1'b0;
end 
// data_in[ 106 ]
initial
begin
	data_in[106] = 1'b1;
end 
// data_in[ 105 ]
initial
begin
	data_in[105] = 1'b0;
end 
// data_in[ 104 ]
initial
begin
	data_in[104] = 1'b1;
end 
// data_in[ 103 ]
initial
begin
	data_in[103] = 1'b0;
end 
// data_in[ 102 ]
initial
begin
	data_in[102] = 1'b1;
end 
// data_in[ 101 ]
initial
begin
	data_in[101] = 1'b1;
end 
// data_in[ 100 ]
initial
begin
	data_in[100] = 1'b0;
end 
// data_in[ 99 ]
initial
begin
	data_in[99] = 1'b0;
end 
// data_in[ 98 ]
initial
begin
	data_in[98] = 1'b1;
end 
// data_in[ 97 ]
initial
begin
	data_in[97] = 1'b1;
end 
// data_in[ 96 ]
initial
begin
	data_in[96] = 1'b1;
end 
// data_in[ 95 ]
initial
begin
	data_in[95] = 1'b1;
end 
// data_in[ 94 ]
initial
begin
	data_in[94] = 1'b0;
end 
// data_in[ 93 ]
initial
begin
	data_in[93] = 1'b0;
end 
// data_in[ 92 ]
initial
begin
	data_in[92] = 1'b0;
end 
// data_in[ 91 ]
initial
begin
	data_in[91] = 1'b1;
end 
// data_in[ 90 ]
initial
begin
	data_in[90] = 1'b0;
end 
// data_in[ 89 ]
initial
begin
	data_in[89] = 1'b0;
end 
// data_in[ 88 ]
initial
begin
	data_in[88] = 1'b1;
end 
// data_in[ 87 ]
initial
begin
	data_in[87] = 1'b1;
end 
// data_in[ 86 ]
initial
begin
	data_in[86] = 1'b0;
end 
// data_in[ 85 ]
initial
begin
	data_in[85] = 1'b1;
end 
// data_in[ 84 ]
initial
begin
	data_in[84] = 1'b0;
end 
// data_in[ 83 ]
initial
begin
	data_in[83] = 1'b1;
end 
// data_in[ 82 ]
initial
begin
	data_in[82] = 1'b0;
end 
// data_in[ 81 ]
initial
begin
	data_in[81] = 1'b1;
end 
// data_in[ 80 ]
initial
begin
	data_in[80] = 1'b1;
end 
// data_in[ 79 ]
initial
begin
	data_in[79] = 1'b1;
end 
// data_in[ 78 ]
initial
begin
	data_in[78] = 1'b1;
end 
// data_in[ 77 ]
initial
begin
	data_in[77] = 1'b0;
end 
// data_in[ 76 ]
initial
begin
	data_in[76] = 1'b0;
end 
// data_in[ 75 ]
initial
begin
	data_in[75] = 1'b1;
end 
// data_in[ 74 ]
initial
begin
	data_in[74] = 1'b1;
end 
// data_in[ 73 ]
initial
begin
	data_in[73] = 1'b0;
end 
// data_in[ 72 ]
initial
begin
	data_in[72] = 1'b1;
end 
// data_in[ 71 ]
initial
begin
	data_in[71] = 1'b1;
end 
// data_in[ 70 ]
initial
begin
	data_in[70] = 1'b1;
end 
// data_in[ 69 ]
initial
begin
	data_in[69] = 1'b1;
end 
// data_in[ 68 ]
initial
begin
	data_in[68] = 1'b0;
end 
// data_in[ 67 ]
initial
begin
	data_in[67] = 1'b1;
end 
// data_in[ 66 ]
initial
begin
	data_in[66] = 1'b1;
end 
// data_in[ 65 ]
initial
begin
	data_in[65] = 1'b1;
end 
// data_in[ 64 ]
initial
begin
	data_in[64] = 1'b1;
end 
// data_in[ 63 ]
initial
begin
	data_in[63] = 1'b1;
end 
// data_in[ 62 ]
initial
begin
	data_in[62] = 1'b1;
end 
// data_in[ 61 ]
initial
begin
	data_in[61] = 1'b1;
end 
// data_in[ 60 ]
initial
begin
	data_in[60] = 1'b1;
end 
// data_in[ 59 ]
initial
begin
	data_in[59] = 1'b1;
end 
// data_in[ 58 ]
initial
begin
	data_in[58] = 1'b1;
end 
// data_in[ 57 ]
initial
begin
	data_in[57] = 1'b1;
end 
// data_in[ 56 ]
initial
begin
	data_in[56] = 1'b0;
end 
// data_in[ 55 ]
initial
begin
	data_in[55] = 1'b1;
end 
// data_in[ 54 ]
initial
begin
	data_in[54] = 1'b1;
end 
// data_in[ 53 ]
initial
begin
	data_in[53] = 1'b0;
end 
// data_in[ 52 ]
initial
begin
	data_in[52] = 1'b1;
end 
// data_in[ 51 ]
initial
begin
	data_in[51] = 1'b1;
end 
// data_in[ 50 ]
initial
begin
	data_in[50] = 1'b1;
end 
// data_in[ 49 ]
initial
begin
	data_in[49] = 1'b0;
end 
// data_in[ 48 ]
initial
begin
	data_in[48] = 1'b0;
end 
// data_in[ 47 ]
initial
begin
	data_in[47] = 1'b1;
end 
// data_in[ 46 ]
initial
begin
	data_in[46] = 1'b0;
end 
// data_in[ 45 ]
initial
begin
	data_in[45] = 1'b1;
end 
// data_in[ 44 ]
initial
begin
	data_in[44] = 1'b1;
end 
// data_in[ 43 ]
initial
begin
	data_in[43] = 1'b1;
end 
// data_in[ 42 ]
initial
begin
	data_in[42] = 1'b0;
end 
// data_in[ 41 ]
initial
begin
	data_in[41] = 1'b1;
end 
// data_in[ 40 ]
initial
begin
	data_in[40] = 1'b0;
end 
// data_in[ 39 ]
initial
begin
	data_in[39] = 1'b1;
end 
// data_in[ 38 ]
initial
begin
	data_in[38] = 1'b0;
end 
// data_in[ 37 ]
initial
begin
	data_in[37] = 1'b0;
end 
// data_in[ 36 ]
initial
begin
	data_in[36] = 1'b1;
end 
// data_in[ 35 ]
initial
begin
	data_in[35] = 1'b1;
end 
// data_in[ 34 ]
initial
begin
	data_in[34] = 1'b0;
end 
// data_in[ 33 ]
initial
begin
	data_in[33] = 1'b0;
end 
// data_in[ 32 ]
initial
begin
	data_in[32] = 1'b0;
end 
// data_in[ 31 ]
initial
begin
	data_in[31] = 1'b0;
end 
// data_in[ 30 ]
initial
begin
	data_in[30] = 1'b1;
end 
// data_in[ 29 ]
initial
begin
	data_in[29] = 1'b1;
end 
// data_in[ 28 ]
initial
begin
	data_in[28] = 1'b1;
end 
// data_in[ 27 ]
initial
begin
	data_in[27] = 1'b0;
end 
// data_in[ 26 ]
initial
begin
	data_in[26] = 1'b1;
end 
// data_in[ 25 ]
initial
begin
	data_in[25] = 1'b1;
end 
// data_in[ 24 ]
initial
begin
	data_in[24] = 1'b0;
end 
// data_in[ 23 ]
initial
begin
	data_in[23] = 1'b0;
end 
// data_in[ 22 ]
initial
begin
	data_in[22] = 1'b1;
end 
// data_in[ 21 ]
initial
begin
	data_in[21] = 1'b0;
end 
// data_in[ 20 ]
initial
begin
	data_in[20] = 1'b1;
end 
// data_in[ 19 ]
initial
begin
	data_in[19] = 1'b0;
end 
// data_in[ 18 ]
initial
begin
	data_in[18] = 1'b1;
end 
// data_in[ 17 ]
initial
begin
	data_in[17] = 1'b0;
end 
// data_in[ 16 ]
initial
begin
	data_in[16] = 1'b0;
end 
// data_in[ 15 ]
initial
begin
	data_in[15] = 1'b0;
end 
// data_in[ 14 ]
initial
begin
	data_in[14] = 1'b0;
end 
// data_in[ 13 ]
initial
begin
	data_in[13] = 1'b1;
end 
// data_in[ 12 ]
initial
begin
	data_in[12] = 1'b1;
end 
// data_in[ 11 ]
initial
begin
	data_in[11] = 1'b0;
end 
// data_in[ 10 ]
initial
begin
	data_in[10] = 1'b0;
end 
// data_in[ 9 ]
initial
begin
	data_in[9] = 1'b1;
end 
// data_in[ 8 ]
initial
begin
	data_in[8] = 1'b0;
end 
// data_in[ 7 ]
initial
begin
	data_in[7] = 1'b0;
end 
// data_in[ 6 ]
initial
begin
	data_in[6] = 1'b0;
end 
// data_in[ 5 ]
initial
begin
	data_in[5] = 1'b0;
end 
// data_in[ 4 ]
initial
begin
	data_in[4] = 1'b1;
end 
// data_in[ 3 ]
initial
begin
	data_in[3] = 1'b0;
end 
// data_in[ 2 ]
initial
begin
	data_in[2] = 1'b0;
end 
// data_in[ 1 ]
initial
begin
	data_in[1] = 1'b0;
end 
// data_in[ 0 ]
initial
begin
	data_in[0] = 1'b0;
end 
// user_key_in[ 127 ]
initial
begin
	user_key_in[127] = 1'b0;
	user_key_in[127] = #200000 1'b1;
end 
// user_key_in[ 126 ]
initial
begin
	user_key_in[126] = 1'b0;
	user_key_in[126] = #200000 1'b1;
end 
// user_key_in[ 125 ]
initial
begin
	user_key_in[125] = 1'b0;
	user_key_in[125] = #200000 1'b1;
end 
// user_key_in[ 124 ]
initial
begin
	user_key_in[124] = 1'b0;
	user_key_in[124] = #200000 1'b1;
end 
// user_key_in[ 123 ]
initial
begin
	user_key_in[123] = 1'b0;
	user_key_in[123] = #200000 1'b1;
end 
// user_key_in[ 122 ]
initial
begin
	user_key_in[122] = 1'b0;
	user_key_in[122] = #200000 1'b1;
end 
// user_key_in[ 121 ]
initial
begin
	user_key_in[121] = 1'b0;
	user_key_in[121] = #200000 1'b1;
end 
// user_key_in[ 120 ]
initial
begin
	user_key_in[120] = 1'b1;
end 
// user_key_in[ 119 ]
initial
begin
	user_key_in[119] = 1'b0;
	user_key_in[119] = #200000 1'b1;
end 
// user_key_in[ 118 ]
initial
begin
	user_key_in[118] = 1'b0;
	user_key_in[118] = #200000 1'b1;
end 
// user_key_in[ 117 ]
initial
begin
	user_key_in[117] = 1'b1;
end 
// user_key_in[ 116 ]
initial
begin
	user_key_in[116] = 1'b0;
	user_key_in[116] = #200000 1'b1;
end 
// user_key_in[ 115 ]
initial
begin
	user_key_in[115] = 1'b0;
	user_key_in[115] = #200000 1'b1;
end 
// user_key_in[ 114 ]
initial
begin
	user_key_in[114] = 1'b0;
	user_key_in[114] = #200000 1'b1;
end 
// user_key_in[ 113 ]
initial
begin
	user_key_in[113] = 1'b1;
end 
// user_key_in[ 112 ]
initial
begin
	user_key_in[112] = 1'b1;
end 
// user_key_in[ 111 ]
initial
begin
	user_key_in[111] = 1'b0;
	user_key_in[111] = #200000 1'b1;
end 
// user_key_in[ 110 ]
initial
begin
	user_key_in[110] = 1'b1;
end 
// user_key_in[ 109 ]
initial
begin
	user_key_in[109] = 1'b0;
	user_key_in[109] = #200000 1'b1;
end 
// user_key_in[ 108 ]
initial
begin
	user_key_in[108] = 1'b0;
	user_key_in[108] = #200000 1'b1;
end 
// user_key_in[ 107 ]
initial
begin
	user_key_in[107] = 1'b0;
	user_key_in[107] = #200000 1'b1;
end 
// user_key_in[ 106 ]
initial
begin
	user_key_in[106] = 1'b1;
end 
// user_key_in[ 105 ]
initial
begin
	user_key_in[105] = 1'b0;
	user_key_in[105] = #200000 1'b1;
end 
// user_key_in[ 104 ]
initial
begin
	user_key_in[104] = 1'b1;
end 
// user_key_in[ 103 ]
initial
begin
	user_key_in[103] = 1'b0;
	user_key_in[103] = #200000 1'b1;
end 
// user_key_in[ 102 ]
initial
begin
	user_key_in[102] = 1'b1;
end 
// user_key_in[ 101 ]
initial
begin
	user_key_in[101] = 1'b1;
end 
// user_key_in[ 100 ]
initial
begin
	user_key_in[100] = 1'b0;
	user_key_in[100] = #200000 1'b1;
end 
// user_key_in[ 99 ]
initial
begin
	user_key_in[99] = 1'b0;
	user_key_in[99] = #200000 1'b1;
end 
// user_key_in[ 98 ]
initial
begin
	user_key_in[98] = 1'b1;
end 
// user_key_in[ 97 ]
initial
begin
	user_key_in[97] = 1'b1;
end 
// user_key_in[ 96 ]
initial
begin
	user_key_in[96] = 1'b1;
end 
// user_key_in[ 95 ]
initial
begin
	user_key_in[95] = 1'b1;
end 
// user_key_in[ 94 ]
initial
begin
	user_key_in[94] = 1'b0;
	user_key_in[94] = #200000 1'b1;
end 
// user_key_in[ 93 ]
initial
begin
	user_key_in[93] = 1'b0;
	user_key_in[93] = #200000 1'b1;
end 
// user_key_in[ 92 ]
initial
begin
	user_key_in[92] = 1'b0;
	user_key_in[92] = #200000 1'b1;
end 
// user_key_in[ 91 ]
initial
begin
	user_key_in[91] = 1'b1;
end 
// user_key_in[ 90 ]
initial
begin
	user_key_in[90] = 1'b0;
	user_key_in[90] = #200000 1'b1;
end 
// user_key_in[ 89 ]
initial
begin
	user_key_in[89] = 1'b0;
	user_key_in[89] = #200000 1'b1;
end 
// user_key_in[ 88 ]
initial
begin
	user_key_in[88] = 1'b1;
end 
// user_key_in[ 87 ]
initial
begin
	user_key_in[87] = 1'b1;
end 
// user_key_in[ 86 ]
initial
begin
	user_key_in[86] = 1'b0;
	user_key_in[86] = #200000 1'b1;
end 
// user_key_in[ 85 ]
initial
begin
	user_key_in[85] = 1'b1;
end 
// user_key_in[ 84 ]
initial
begin
	user_key_in[84] = 1'b0;
	user_key_in[84] = #200000 1'b1;
end 
// user_key_in[ 83 ]
initial
begin
	user_key_in[83] = 1'b1;
end 
// user_key_in[ 82 ]
initial
begin
	user_key_in[82] = 1'b0;
	user_key_in[82] = #200000 1'b1;
end 
// user_key_in[ 81 ]
initial
begin
	user_key_in[81] = 1'b1;
end 
// user_key_in[ 80 ]
initial
begin
	user_key_in[80] = 1'b1;
end 
// user_key_in[ 79 ]
initial
begin
	user_key_in[79] = 1'b1;
end 
// user_key_in[ 78 ]
initial
begin
	user_key_in[78] = 1'b1;
end 
// user_key_in[ 77 ]
initial
begin
	user_key_in[77] = 1'b0;
	user_key_in[77] = #200000 1'b1;
end 
// user_key_in[ 76 ]
initial
begin
	user_key_in[76] = 1'b0;
	user_key_in[76] = #200000 1'b1;
end 
// user_key_in[ 75 ]
initial
begin
	user_key_in[75] = 1'b1;
end 
// user_key_in[ 74 ]
initial
begin
	user_key_in[74] = 1'b1;
end 
// user_key_in[ 73 ]
initial
begin
	user_key_in[73] = 1'b0;
	user_key_in[73] = #200000 1'b1;
end 
// user_key_in[ 72 ]
initial
begin
	user_key_in[72] = 1'b1;
end 
// user_key_in[ 71 ]
initial
begin
	user_key_in[71] = 1'b1;
end 
// user_key_in[ 70 ]
initial
begin
	user_key_in[70] = 1'b1;
end 
// user_key_in[ 69 ]
initial
begin
	user_key_in[69] = 1'b1;
end 
// user_key_in[ 68 ]
initial
begin
	user_key_in[68] = 1'b0;
	user_key_in[68] = #200000 1'b1;
end 
// user_key_in[ 67 ]
initial
begin
	user_key_in[67] = 1'b1;
end 
// user_key_in[ 66 ]
initial
begin
	user_key_in[66] = 1'b1;
end 
// user_key_in[ 65 ]
initial
begin
	user_key_in[65] = 1'b1;
end 
// user_key_in[ 64 ]
initial
begin
	user_key_in[64] = 1'b1;
end 
// user_key_in[ 63 ]
initial
begin
	user_key_in[63] = 1'b1;
end 
// user_key_in[ 62 ]
initial
begin
	user_key_in[62] = 1'b1;
end 
// user_key_in[ 61 ]
initial
begin
	user_key_in[61] = 1'b1;
end 
// user_key_in[ 60 ]
initial
begin
	user_key_in[60] = 1'b1;
end 
// user_key_in[ 59 ]
initial
begin
	user_key_in[59] = 1'b1;
end 
// user_key_in[ 58 ]
initial
begin
	user_key_in[58] = 1'b1;
end 
// user_key_in[ 57 ]
initial
begin
	user_key_in[57] = 1'b1;
end 
// user_key_in[ 56 ]
initial
begin
	user_key_in[56] = 1'b0;
	user_key_in[56] = #200000 1'b1;
end 
// user_key_in[ 55 ]
initial
begin
	user_key_in[55] = 1'b1;
end 
// user_key_in[ 54 ]
initial
begin
	user_key_in[54] = 1'b1;
end 
// user_key_in[ 53 ]
initial
begin
	user_key_in[53] = 1'b0;
	user_key_in[53] = #200000 1'b1;
end 
// user_key_in[ 52 ]
initial
begin
	user_key_in[52] = 1'b1;
end 
// user_key_in[ 51 ]
initial
begin
	user_key_in[51] = 1'b1;
end 
// user_key_in[ 50 ]
initial
begin
	user_key_in[50] = 1'b1;
end 
// user_key_in[ 49 ]
initial
begin
	user_key_in[49] = 1'b0;
	user_key_in[49] = #200000 1'b1;
end 
// user_key_in[ 48 ]
initial
begin
	user_key_in[48] = 1'b0;
	user_key_in[48] = #200000 1'b1;
end 
// user_key_in[ 47 ]
initial
begin
	user_key_in[47] = 1'b1;
end 
// user_key_in[ 46 ]
initial
begin
	user_key_in[46] = 1'b0;
	user_key_in[46] = #200000 1'b1;
end 
// user_key_in[ 45 ]
initial
begin
	user_key_in[45] = 1'b1;
end 
// user_key_in[ 44 ]
initial
begin
	user_key_in[44] = 1'b1;
end 
// user_key_in[ 43 ]
initial
begin
	user_key_in[43] = 1'b1;
end 
// user_key_in[ 42 ]
initial
begin
	user_key_in[42] = 1'b0;
	user_key_in[42] = #200000 1'b1;
end 
// user_key_in[ 41 ]
initial
begin
	user_key_in[41] = 1'b1;
end 
// user_key_in[ 40 ]
initial
begin
	user_key_in[40] = 1'b0;
	user_key_in[40] = #200000 1'b1;
end 
// user_key_in[ 39 ]
initial
begin
	user_key_in[39] = 1'b1;
end 
// user_key_in[ 38 ]
initial
begin
	user_key_in[38] = 1'b0;
	user_key_in[38] = #200000 1'b1;
end 
// user_key_in[ 37 ]
initial
begin
	user_key_in[37] = 1'b0;
	user_key_in[37] = #200000 1'b1;
end 
// user_key_in[ 36 ]
initial
begin
	user_key_in[36] = 1'b1;
end 
// user_key_in[ 35 ]
initial
begin
	user_key_in[35] = 1'b1;
end 
// user_key_in[ 34 ]
initial
begin
	user_key_in[34] = 1'b0;
	user_key_in[34] = #200000 1'b1;
end 
// user_key_in[ 33 ]
initial
begin
	user_key_in[33] = 1'b0;
	user_key_in[33] = #200000 1'b1;
end 
// user_key_in[ 32 ]
initial
begin
	user_key_in[32] = 1'b0;
	user_key_in[32] = #200000 1'b1;
end 
// user_key_in[ 31 ]
initial
begin
	user_key_in[31] = 1'b0;
	user_key_in[31] = #200000 1'b1;
end 
// user_key_in[ 30 ]
initial
begin
	user_key_in[30] = 1'b1;
end 
// user_key_in[ 29 ]
initial
begin
	user_key_in[29] = 1'b1;
end 
// user_key_in[ 28 ]
initial
begin
	user_key_in[28] = 1'b1;
end 
// user_key_in[ 27 ]
initial
begin
	user_key_in[27] = 1'b0;
	user_key_in[27] = #200000 1'b1;
end 
// user_key_in[ 26 ]
initial
begin
	user_key_in[26] = 1'b1;
end 
// user_key_in[ 25 ]
initial
begin
	user_key_in[25] = 1'b1;
end 
// user_key_in[ 24 ]
initial
begin
	user_key_in[24] = 1'b0;
	user_key_in[24] = #200000 1'b1;
end 
// user_key_in[ 23 ]
initial
begin
	user_key_in[23] = 1'b0;
	user_key_in[23] = #200000 1'b1;
end 
// user_key_in[ 22 ]
initial
begin
	user_key_in[22] = 1'b1;
end 
// user_key_in[ 21 ]
initial
begin
	user_key_in[21] = 1'b0;
	user_key_in[21] = #200000 1'b1;
end 
// user_key_in[ 20 ]
initial
begin
	user_key_in[20] = 1'b1;
end 
// user_key_in[ 19 ]
initial
begin
	user_key_in[19] = 1'b0;
	user_key_in[19] = #200000 1'b1;
end 
// user_key_in[ 18 ]
initial
begin
	user_key_in[18] = 1'b1;
end 
// user_key_in[ 17 ]
initial
begin
	user_key_in[17] = 1'b0;
	user_key_in[17] = #200000 1'b1;
end 
// user_key_in[ 16 ]
initial
begin
	user_key_in[16] = 1'b0;
	user_key_in[16] = #200000 1'b1;
end 
// user_key_in[ 15 ]
initial
begin
	user_key_in[15] = 1'b0;
	user_key_in[15] = #200000 1'b1;
end 
// user_key_in[ 14 ]
initial
begin
	user_key_in[14] = 1'b0;
	user_key_in[14] = #200000 1'b1;
end 
// user_key_in[ 13 ]
initial
begin
	user_key_in[13] = 1'b1;
end 
// user_key_in[ 12 ]
initial
begin
	user_key_in[12] = 1'b1;
end 
// user_key_in[ 11 ]
initial
begin
	user_key_in[11] = 1'b0;
	user_key_in[11] = #200000 1'b1;
end 
// user_key_in[ 10 ]
initial
begin
	user_key_in[10] = 1'b0;
	user_key_in[10] = #200000 1'b1;
end 
// user_key_in[ 9 ]
initial
begin
	user_key_in[9] = 1'b1;
end 
// user_key_in[ 8 ]
initial
begin
	user_key_in[8] = 1'b0;
	user_key_in[8] = #200000 1'b1;
end 
// user_key_in[ 7 ]
initial
begin
	user_key_in[7] = 1'b0;
	user_key_in[7] = #200000 1'b1;
end 
// user_key_in[ 6 ]
initial
begin
	user_key_in[6] = 1'b0;
	user_key_in[6] = #200000 1'b1;
end 
// user_key_in[ 5 ]
initial
begin
	user_key_in[5] = 1'b0;
	user_key_in[5] = #200000 1'b1;
end 
// user_key_in[ 4 ]
initial
begin
	user_key_in[4] = 1'b1;
end 
// user_key_in[ 3 ]
initial
begin
	user_key_in[3] = 1'b0;
	user_key_in[3] = #200000 1'b1;
end 
// user_key_in[ 2 ]
initial
begin
	user_key_in[2] = 1'b0;
	user_key_in[2] = #200000 1'b1;
end 
// user_key_in[ 1 ]
initial
begin
	user_key_in[1] = 1'b0;
	user_key_in[1] = #200000 1'b1;
end 
// user_key_in[ 0 ]
initial
begin
	user_key_in[0] = 1'b0;
	user_key_in[0] = #200000 1'b1;
end 

sm4_top_vlg_sample_tst tb_sample (
	.clk(clk),
	.data_in(data_in),
	.enable_key_exp_and_valid_data_in(enable_key_exp_and_valid_data_in),
	.encdec_enable_in(encdec_enable_in),
	.encdec_sel_in(encdec_sel_in),
	.reset_n(reset_n),
	.user_key_in(user_key_in),
	.sampler_tx(sampler)
);

sm4_top_vlg_check_tst tb_out(
	.key_exp_ready_out(key_exp_ready_out),
	.key_exp_ready_signal(key_exp_ready_signal),
	.ready_out(ready_out),
	.result_out(result_out),
	.sampler_rx(sampler)
);
endmodule

